#include <stdio.h>
int count=0;
int max(int a, int b)
{
 return (a > b)? a : b; 
 count++;
}
int knapsack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
   count++;
   for (i = 0; i <= n; i++)
   {
   	   count++;
   	   count++;
       for (w = 0; w <= W; w++)
       {
       	   count++;
       	   count++;
           if (i==0 || w==0)
           { 
               count++;
               K[i][w] = 0;
           }
           else if (wt[i-1] <= w)
           {
                 count++;
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
             }
           else
           {
           	    count++;
                 K[i][w] = K[i-1][w];
             }
       }
       count++;
   }
   count++;
   count++;
   return K[n][W];
}
int main()
{
    int val[] = {60, 100, 120};
    int wt[] = {10, 20, 30};
    int  W = 50;
    int n = sizeof(val)/sizeof(val[0]);
    count++;
    printf("\nValue = %d", knapsack(W, wt, val, n));
    printf("\ntimecomplexity is %d",count);
    return 0;
}
